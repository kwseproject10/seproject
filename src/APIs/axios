
    const route = `http://${process.env.REACT_APP_HOST}:${process.env.REACT_APP_HOST_PORT}/auth?userID=${inputID}&PW=${inputPW}`;
    const res = await axios.get(
      route
    );
    if (res.data.result === "true") {
      setUserID(res.data.userID);
      setAuth(true);
      if (res.data.userType === "student") {
        goStudent();
      } else if (res.data.userType === "professor") {
        goFaculty();
      }
    } else if (res.data.result === "false") {
      setAlret("로그인 정보가 일치하지 않습니다.");
      return;
    }
    setAlret("로그인 오류가 발생하였습니다.");
    return;

    
  const userID = useRecoilValue(userIDState);

  useEffect(() => {
    const fetch = async () => {
      const route = `http://${process.env.REACT_APP_HOST}:${process.env.REACT_APP_HOST_PORT}/userinform?userID=${userID}`;
      const res = await axios.get(
        route
      );
      if(res.data.result === "false") {
        console.log("load fail");
        return
      }
      console.log(res.data);
      setUserInform(res.data);
    }

    fetch()
  }, [ userID ])

  
  const userID = useRecoilValue(userIDState);
  const selectedLecture = useRecoilValue(LectureSelectedState);

  useEffect(() => {
    const fetchAttendance = async () => {
      const route = `http://${process.env.REACT_APP_HOST}:${process.env.REACT_APP_HOST_PORT}/attendance?userID=${userID}&lectureID=${selectedLecture}`;
      const res = await axios.get(
        route
      );
      if(res.data.result === "false") {
        console.log("attendance load fail");
        return
      }
      console.log(res.data);
      setAttendance(res.data);
    }

    fetchAttendance();
  }, [ userID, selectedLecture ])

  useEffect(() => {
    const fetchArchive = async () => {
      const route = `http://${process.env.REACT_APP_HOST}:${process.env.REACT_APP_HOST_PORT}/archive?lectureID=${selectedLecture}`;
      const res = await axios.get(
        route
      );
      if(res.data.result === "false") {
        console.log("archive load fail");
        return
      }
      console.log(res.data);
      setArchiveList(res.data);
    }
    fetchArchive();
  }, [ userID, selectedLecture ])
  
  const userID = useRecoilValue(userIDState);
  const selectedLecture = useRecoilValue(LectureSelectedState);
  
  useEffect(() => {
    const fetchNotice = async () => {
      const route = `http://${process.env.REACT_APP_HOST}:${process.env.REACT_APP_HOST_PORT}/notice?lectureID=${selectedLecture}`;
      const res = await axios.get(
        route
      );
      if(res.data.result === "false") {
        console.log("notice load fail");
        return
      }
      console.log(res.data);
      setNoticeList(res.data);
    }
    fetchNotice();
  }, [ userID, selectedLecture ])
  
  const userID = useRecoilValue(userIDState);
  const selectedLecture = useRecoilValue(LectureSelectedState);
  
  useEffect(() => {
    const fetchAssignment = async () => {
      const route = `http://${process.env.REACT_APP_HOST}:${process.env.REACT_APP_HOST_PORT}/assignment?lectureID=${selectedLecture}`;
      const res = await axios.get(
        route
      );
      if(res.data.result === "false") {
        console.log("assignment load fail");
        return
      }
      console.log(res.data);
      setAssignmentList(res.data);
    }
    fetchAssignment();
  }, [ userID, selectedLecture ])